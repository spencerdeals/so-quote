// scraper/bee.js â€” corrected version (removed custom_headers param) import axios from "axios"; const BEE_BASE = "https://app.scrapingbee.com/api/v1"; const BEE_KEY = process.env.SCRAPINGBEE_API_KEY; function extractNamePrice(html) { const nameMatch = html.match(/]*>(.*?)<\/h1>/i)?.[1] || ""; const priceMatch = html.match(/"price"\s*:\s*"(\d[\d.,]*)"/i)?.[1] || html.match(/data-price="(\d[\d.,]*)"/i)?.[1] || html.match(/class="a-offscreen">\$?(\d[\d.,]*)]*content="(\d[\d.,]*)"/i)?.[1] || html.match(/\$ ?(\d{1,3}(?:[,]\d{3})*(?:\.\d{2})?)/)?.[1] || ""; const name = nameMatch.toString().replace(/\s+/g, " ").trim(); const price = priceMatch ? Number(priceMatch.replace(/[,$]/g, "")) : null; return { name, price }; } function sleep(ms) { return new Promise(r => setTimeout(r, ms)); } async function fetchWithBee(targetUrl, { waitMs = 2500, retries = 2, } = {}) { if (!BEE_KEY) throw new Error("Missing SCRAPINGBEE_API_KEY"); const params = [ `api_key=${BEE_KEY}`, `url=${encodeURIComponent(targetUrl)}`, "premium_proxy=true", "country_code=us", "render_js=true", `wait=${waitMs}`, "block_resources=false", "timeout=30000" ].join("&"); let attempt = 0; while (true) { try { const res = await axios.get(`${BEE_BASE}?${params}`, { responseType: "text", validateStatus: () => true }); const beeStatus = Number(res.headers["scrapingbee-status-code"]) || res.status; if (beeStatus >= 200 && beeStatus < 300) return res.data; const beeErr = res.headers["scrapingbee-error"] || res.headers["x-scrapingbee-error"] || (typeof res.data === "string" ? res.data.slice(0, 500) : JSON.stringify(res.data || {})); const msg = `Bee error ${beeStatus}${beeErr ? `: ${beeErr}` : ""}`; if ((beeStatus >= 500 && beeStatus < 600) || beeStatus === 429) { if (attempt >= retries) throw new Error(msg); attempt++; await sleep(400 * (2 ** attempt)); continue; } throw new Error(msg); } catch (err) { if (attempt >= retries) throw err; attempt++; await sleep(400 * (2 ** attempt)); } } } export async function scrapeNameAndPrice(targetUrl) { const html = await fetchWithBee(targetUrl); const { name, price } = extractNamePrice(html); let fallbackName = name; try { const u = new URL(targetUrl); if (!fallbackName) { fallbackName = u.pathname.split("/").filter(Boolean).slice(0, -1).join(" ").replace(/[-_]/g, " ") || `${u.hostname.replace(/^www\./, "")} item (name not found)`; } } catch { if (!fallbackName) fallbackName = "Item (name not found)"; } return { name: fallbackName.trim(), price, htmlSnippet: html.slice(0, 1000) }; }
